#!/usr/bin/python3

from sys import *
from math import *

def matrix_product(matrix1, matrix2):
    result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))]

    for i in range(len(matrix1)):
        for j in range(len(matrix2[0])):
            for k in range(len(matrix2)):
                result[i][j] += matrix1[i][k] * matrix2[k][j]

    return result

def key_to_matrix(key):
    size = 0
    index = 0

    while (size * size < len(key)):
        size += 1

    matrix = []
    for i in range(size):
        matrix_line = []

        for j in range(size):
            if (index > len(key) - 1):
                matrix_line.append(0)
            else:
                matrix_line.append(ord(key[index]))
            index += 1

        matrix.append(matrix_line)

    return matrix

def message_to_matrix(message, columns):
    index = 0
    matrix = []

    for i in range(ceil(len(message) / columns)):
        matrix_line = []

        for j in range(columns):
            if (index > len(message) - 1):
                matrix_line.append(0)
            else:
                matrix_line.append(ord(message[index]))
            index += 1

        matrix.append(matrix_line)

    return matrix

def crypted_message_to_matrix(message, columns):
    index = 0
    matrix = []
    tab = message.split(" ")

    for i in range(ceil(len(tab) / columns)):
        matrix_line = []

        for j in range(columns):
            if (index > len(tab) - 1):
                matrix_line.append(0)
            else:
                matrix_line.append(int(tab[index]))
            index += 1

        matrix.append(matrix_line)

    return matrix

def transpose_matrix(matrix):
    t_matrix = []

    for i, lines in enumerate(matrix):
        t_matrix_line = []

        for j, numbers in enumerate(matrix[i]):
            t_matrix_line.append(matrix[j][i])

        t_matrix.append(t_matrix_line)

    return t_matrix

def calcul_det_2x2(matrix):
    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]

def calcul_det_3x3(matrix):
    det = 0

    det += matrix[0][0] * calcul_cofactor(matrix, 1, 1)
    det += matrix[0][1] * calcul_cofactor(matrix, 1, 2)
    det += matrix[0][2] * calcul_cofactor(matrix, 1, 3)

    return det

def reverse_matrix_2x2(matrix):
    det_matrix = calcul_det_2x2(matrix)

    if det_matrix != 0:
        reversed_matrix = [[matrix[1][1] / det_matrix, -matrix[0][1] / det_matrix],
                           [-matrix[1][0] / det_matrix, matrix[0][0] / det_matrix]]
    else:
        exit(84)

    return reversed_matrix

def calcul_cofactor(matrix, k, m):
    cofactor_matrix = []

    for i, lines in enumerate(matrix):
        if i not in [k - 1]:
            lines_cofactor_matrix = []

            for j, numbers in enumerate(matrix[i]):
                if j not in [m - 1]:
                    lines_cofactor_matrix.append(numbers)

            cofactor_matrix.append(lines_cofactor_matrix)

    return (-1)**(k + m) * calcul_det_2x2(cofactor_matrix)

def reverse_matrix_3x3(matrix):
    det_matrix = calcul_det_3x3(matrix)
    transposed_matrix = transpose_matrix(matrix)
    reversed_matrix = []

    if det_matrix != 0:
        for i in range(len(matrix)):
            line_reversed_matrix = []

            for j in range(len(matrix[i])):
                line_reversed_matrix.append(calcul_cofactor(transposed_matrix, i + 1, j + 1) / det_matrix)

            reversed_matrix.append(line_reversed_matrix)
    else:
        exit(84)

    return reversed_matrix

def reverse_matrix(matrix):
    if (len(matrix) == 1):
        return [[1 / matrix[0][0]]]
    if (len(matrix) == 2):
        return reverse_matrix_2x2(matrix)
    if (len(matrix) == 3):
        return reverse_matrix_3x3(matrix)

def zeros(matrix):
    for y in range(len(matrix)):
        for x in range(len(matrix[y])):
            if round(matrix[y][x],3) == -0.000:
                matrix[y][x] = 0.0

    return matrix

def print_key(matrix, encryption):
    print("Key matrix:")

    if (encryption):
        for i in range (len(matrix)):
            for y in range (len(matrix[i])):
                if (y + 1 < len(matrix[i])):
                    print(matrix[i][y], end='\t')
                else:
                    print(matrix[i][y])

    else:
        for i, lines in enumerate(matrix):
            for j, numbers in enumerate(lines):
                matrix[i][j] = round(numbers, 3)

        matrix = zeros(matrix)

        for i in range (len(matrix)):
            for y in range (len(matrix[i])):
                if (y + 1 < len(matrix[i])):
                    print(matrix[i][y], end='\t')
                else:
                    print(matrix[i][y])

def print_message(message, encryption, offset):
    if (encryption):
        print("\nEncrypted message:")
        print(message[:-1])
    else:
        print("\nDecrypted message:")
        if (offset != 0):
            print(message[:-offset])
        else:
            print(message)

def error(argv):
    len_argv = len(argv)

    if (len_argv != 2 and len_argv != 4):
        exit(84)
    if (len_argv ==  2 and str(argv[1]) != "-h"):
        exit(84)
    if (len_argv == 4):
        try:
            str(argv[1])
            str(argv[2])
            if (int(argv[3]) != 0 and int(argv[3]) != 1):
                exit(84)

        except:
            exit(84)

def help(argv):
    if len(argv) == 2 and argv[1] == "-h":
        print("USAGE")
        print("    ./103cipher message key flag\n")
        print("DESCRIPTION")
        print("    message\ta message, made of ASCII characters")
        print("    key \tthe encryption key, made of ASCII characters")
        print("    flag\t0 for the message to be encrypted, 1 to be decrypted")
        exit(0)

def encryption(argv):
    key = key_to_matrix(argv[2])
    message = argv[1]
    message_matrix = message_to_matrix(message, len(key))
    encryption_matrix = matrix_product(message_matrix, key)
    encrypted_message = ''

    for i, lines in enumerate(encryption_matrix):
        for j, numbers in enumerate(lines):
            encrypted_message += str(encryption_matrix[i][j])
            if (j < len(lines)):
                encrypted_message += ' '

    print_key(key, True)
    print_message(encrypted_message, True, None)

def is_valid_message(message):
    message = message.split(' ')

    try:
        for i, numbers in enumerate(message):
            int(numbers)
    except:
        exit(84)

def decryption(argv):
    key = key_to_matrix(argv[2])
    key = reverse_matrix(key)
    message = argv[1]
    is_valid_message(message)
    message_matrix = crypted_message_to_matrix(message, len(key))
    decryption_matrix = matrix_product(message_matrix, key)
    decrypted_message = ''

    for i, lines in enumerate(decryption_matrix):
        for j, numbers in enumerate(lines):
            decrypted_message += chr(round(decryption_matrix[i][j]))

    print_key(key, False)
    print_message(decrypted_message, False, len(key) - 1)

def main():
    error(argv)
    help(argv)

    if (argv[3] == "0"):
        encryption(argv)
    else:
        decryption(argv)

    return 0

main()